#!/bin/bash

set -euo pipefail

basedir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && cd .. && pwd )"

job_name="${BUILDKITE_PIPELINE_SLUG}-${BUILDKITE_BUILD_NUMBER}-$(head -c 5 /dev/urandom | base32 | tr '[:upper:]' '[:lower:]')"
echo "${job_name}" > /tmp/job_name

if [[ ${BUILDKITE_TIMEOUT:-"false"} == "false" ]]; then
  BUILDKITE_TIMEOUT=600
fi
((timeout=BUILDKITE_TIMEOUT*60))
export BUILDKITE_TIMEOUT

function cleanup {
  # Delete all jobs older than a day
  kubectl delete job "$(kubectl get job -l buildkite/plugin=k8s | awk 'match($4,/[0-9]+d/) {print $1}')" 2>/dev/null || true
}
trap cleanup EXIT

function tail_logs {
  # logs will be failing until they're available for streaming, once available we actually start streaming them.
  while ! kubectl logs --tail 0 --limit-bytes 1 "job/${job_name}" > /dev/null 2>&1; do sleep 0.2; done

  # It can fail even after we get the first result, so run it in loop (potentially allowing log to be displayed multiple times, but chance is low).
  # Example of a failure: "Error from server (BadRequest): container "step" in pod "somepod" is waiting to start: PodInitializing"
  while ! kubectl logs --follow "job/${job_name}" 2>/dev/null; do sleep 0.2; done
}

echo "--- :kubernetes: Starting Kubernetes Job"

export patchFunc=${BUILDKITE_PLUGIN_K8S_PATCH:-"function(f) f"}

jsonnet \
  --tla-str "jobName=${job_name}" \
  --tla-str-file "stepEnvFile=${BUILDKITE_ENV_FILE}" \
  --tla-code "agentEnv=$(jq -c -n env)" \
  --tla-code patchFunc \
  "${basedir}/lib/job.jsonnet" \
  | kubectl apply -f -

echo "Timeout: ${timeout}s"

echo "+++ :kubernetes: Running image: ${BUILDKITE_PLUGIN_K8S_IMAGE}"

tail_logs &

sleeper=2
counter=${timeout}
jobstatus=""
while [[ -z "$jobstatus" ]] ; do
  jobstatus=$(kubectl get job "${job_name}" -o 'jsonpath={.status.conditions[].type}')
  sleep $sleeper
  if [[ $timeout -gt 0 ]]; then
    (( counter -= sleeper )) || jobstatus="timeout"
  fi
done

echo
echo "--- :kubernetes: Job status: $jobstatus"
status=1
if [[ "$jobstatus" == "Complete" ]] ; then
  echo "success"
  status=0
fi

exit $status
